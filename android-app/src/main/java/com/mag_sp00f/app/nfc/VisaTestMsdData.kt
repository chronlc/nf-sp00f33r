package com.mag_sp00f.app.nfc

/**
 * VISA TEST MSD Reference Data from emv.html
 * 
 * Contains exact response data for validation testing:
 * - Test PAN: 4154904674973556
 * - Expiry: 29/02
 * - Track2: 4154904674973556d29022010000820083001f
 * - AIDs: A0000000031010, A0000000980840
 */
class VisaTestMsdData {
    
    fun getPpseResponse(): ByteArray {
        // CONTACTLESS PPSE response (2PAY.SYS.DDF01) for NFC/contactless
        // Contains VISA MSD AID for contactless transactions
        val response = "6F5B840E325041592E5359532E4444463031A549BF0C4661224F07A0000000031010870101500A564953412044454249545F55025553420341549061204F07A0000000980840870102500855532044454249545F5502555342034154909000"
        return response.hexToByteArray()
    }
    
    fun getVisaMsdAidResponse(): ByteArray {
        // SELECT AID A0000000031010 response from emv.html
        val response = "6F4F8407A0000000031010A544500A564953412044454249545F2D02656E8701019F38189F66049F02069F03069F1A0295055F2A029A039C019F3704BF0C125F550255539F5A05110840084042034154909000"
        return response.hexToByteArray()
    }
    
    fun getUsDebitAidResponse(): ByteArray {
        // SELECT AID A0000000980840 response from emv.html  
        val response = "6F4D8407A0000000980840A542500855532044454249545F2D02656E8701029F38189F66049F02069F03069F1A0295055F2A029A039C019F3704BF0C125F550255539F5A05110840084042034154909000"
        return response.hexToByteArray()
    }
    
    fun getGpoResponse(): ByteArray {
        // MSD-ONLY GPO response with AIP=2000 (Magstripe only)
        // AIP: 2000 = MSD supported, no SDA/DDA/CDA
        // AFL: Simple AFL pointing to SFI 2 where we have MSD track data
        val response = "77819082022000940408020101001002020057134154904674973556D29022010000820083001F5F3401005F200F43415244484F4C4445522F564953419F100706011203A000009F2608D3967976E30EFAFC9F2701809F3602011E9F6C0200009F6E04207000009000"
        return response.hexToByteArray()
    }
    
    fun getReadRecordResponse(sfi: Int, record: Int): ByteArray {
        return when (sfi) {
            2 -> when (record) {
                // SFI 2: MSD Track Data records
                1 -> "70819057134154904674973556D29022010000820083001F5F200F43415244484F4C4445522F564953415F24032902285F25031909015F28020840570D41549046749735565E202902285F3401009F0702FF009F080200029F420208409F4401029000".hexToByteArray()
                2 -> "70819F9F32010392819F9F4701039F4601059F1A0208409F160F31323334353637383930313233343536375A0841549046749735565F24032902285F25031909015F28020840570D41549046749735565E202902289F0702FF009F080200029F420208409F4401029000".hexToByteArray()
                else -> byteArrayOf(0x6A.toByte(), 0x83.toByte()) // Record not found
            }
            8 -> when (record) {
                6 -> "700A5F280208409F0702C0809000".hexToByteArray()
                8 -> "700A5F280208409F070200809000".hexToByteArray()
                else -> byteArrayOf(0x6A.toByte(), 0x83.toByte()) // Record not found
            }
            10 -> when (record) {
                2 -> "7081FB9081F838198D00C088BDC0A936E463555CCE559D6CF84995F4A53D253BF3C92008FD5C7AD3F7F8871281E1FBCD6A18BF1CD7145FF256ACE9515A6B5E2410F799260473561D129C88ED29931021E82CA53B233BFF40C01C8BB7855874641EC636222B39EB1A90C09BFB84402B4DD5F7D4D9BA29756BE6A37BFE500B84D1C0DB03E01B3951E94510C7F4E3747F6763140B36B6BEDA4D366E7DB122B2676101801208EC89CFC4BC90D53FD48B04D477F0BB1FEEB2EB9E998D610A728DFB7B95FA36831CEDED1F981F17D3B253D5B7D37813AEC28D38B7EED0C6B99B0F1A177E7AEEBDBC766CB14A4F84FA6546D7107BE0B723B0F7047DC5DDBD5DAC0A9000".hexToByteArray()
                3 -> "7081F49F4681F03AD82D214C75AEA44ACA488DBBE5C046C2EEF3A72246C38BE78F907A181B8065A25BD80AFCA1F023186D0229DE5252747885174EF3B31B29A338F8D1979A5FD327BA8EC63A15FB75E8EA0740FF8109BDE262B5E162F7EDACE155D831E0504F02F6DA86EC9877112EC97226E03DB2E8138D3F73712768FAA5A0D50667520238BB427C189677CE74CA43539F5321D781520AF8594B8C5A48DFE658A5F1C8C593824A44DBD64E5DBE0B0BC39713678F934CDB02CB9FA654E50266594D1842903EF1D09DB7C6FF1B8D837476844642FF5A0401AF7C254C6988890D60093B530EEE6A4859D7A4C3B08D9AE9B52BC2635FF67A9000".hexToByteArray()
                4 -> "70439F320103921C9CC88A4C5C2B5790B0C5D21227AFA74F54F1FE6A71C500D3E8C53C798F01099F4701035A0841549046749735565F24032902289F69070AF0E66E600009000".hexToByteArray()
                else -> byteArrayOf(0x6A.toByte(), 0x83.toByte()) // Record not found
            }
            else -> byteArrayOf(0x6A.toByte(), 0x83.toByte()) // Record not found
        }
    }
    
    private fun String.hexToByteArray(): ByteArray {
        return chunked(2).map { it.toInt(16).toByte() }.toByteArray()
    }
}